#!/bin/bash
# Real-World C++ Network Security Analyzer Usage Guide
# Spring 2024 Security Software Development

echo "üöÄ C++ Network Security Analyzer - Real-World Usage Guide"
echo "=========================================================="

# Check if we're in the right directory
if [ ! -f "cpp/src/test_main.cpp" ]; then
    echo "‚ùå Error: Please run this script from the project root directory"
    exit 1
fi

# Function to build the C++ analyzer
build_analyzer() {
    echo "üî® Building C++ Network Security Analyzer..."
    cd cpp
    
    # Try Makefile first
    if make clean && make; then
        echo "‚úÖ Build successful using Makefile"
        return 0
    fi
    
    # Try CMake if Makefile fails
    echo "üîÑ Trying CMake build..."
    mkdir -p build
    cd build
    if cmake .. && make; then
        echo "‚úÖ Build successful using CMake"
        return 0
    fi
    
    echo "‚ùå Build failed"
    return 1
}

# Function to list available interfaces
list_interfaces() {
    echo "üìã Available Network Interfaces:"
    echo "--------------------------------"
    ./bin/network_analyzer 2>/dev/null | grep "  - " || echo "No interfaces found"
    echo ""
}

# Function to run basic monitoring
basic_monitoring() {
    local interface=${1:-"en0"}
    local duration=${2:-30}
    
    echo "üîç Basic Network Monitoring"
    echo "Interface: $interface"
    echo "Duration: $duration seconds"
    echo "--------------------------------"
    
    # Build if needed
    if [ ! -f "./bin/network_analyzer" ]; then
        if ! build_analyzer; then
            return 1
        fi
    fi
    
    # Run basic monitoring
    echo "Starting monitoring... (Press Ctrl+C to stop)"
    timeout $duration ./bin/network_analyzer 2>/dev/null || true
    
    echo "‚úÖ Basic monitoring completed"
}

# Function to create a monitoring script
create_monitoring_script() {
    cat > monitor_network.sh << 'EOF'
#!/bin/bash
# Network Security Monitoring Script
# Generated by Network Security Analyzer

INTERFACE=${1:-"en0"}
DURATION=${2:-300}  # 5 minutes default
LOG_FILE="network_monitor_$(date +%Y%m%d_%H%M%S).log"

echo "üöÄ Starting Network Security Monitoring"
echo "Interface: $INTERFACE"
echo "Duration: $DURATION seconds"
echo "Log file: $LOG_FILE"
echo "========================================"

# Function to log messages
log_message() {
    echo "[$(date '+%Y-%m-%d %H:%M:%S')] $1" | tee -a "$LOG_FILE"
}

# Check if analyzer exists
if [ ! -f "./cpp/bin/network_analyzer" ]; then
    log_message "‚ùå Network analyzer not found. Building..."
    cd cpp
    if ! make clean && make; then
        log_message "‚ùå Build failed"
        exit 1
    fi
    cd ..
fi

# Start monitoring
log_message "üîç Starting packet capture on $INTERFACE"

# Run the analyzer with timeout
timeout $DURATION ./cpp/bin/network_analyzer 2>&1 | while IFS= read -r line; do
    log_message "$line"
    
    # Check for specific patterns (basic threat detection)
    if echo "$line" | grep -q "anomaly\|threat\|alert"; then
        log_message "üö® SECURITY ALERT: $line"
    fi
    
    if echo "$line" | grep -q "port.*scan\|ddos\|malware"; then
        log_message "‚ö†Ô∏è  THREAT DETECTED: $line"
    fi
done

log_message "‚úÖ Monitoring completed"
log_message "üìä Summary: Check $LOG_FILE for details"

echo ""
echo "üìÑ Monitoring log saved to: $LOG_FILE"
echo "üîç Review the log for security insights"
EOF

    chmod +x monitor_network.sh
    echo "‚úÖ Created monitoring script: monitor_network.sh"
    echo "Usage: ./monitor_network.sh [interface] [duration_seconds]"
}

# Function to create a continuous monitoring service
create_monitoring_service() {
    cat > network_monitor.service << EOF
[Unit]
Description=Network Security Analyzer
After=network.target

[Service]
Type=simple
User=root
WorkingDirectory=$(pwd)
ExecStart=$(pwd)/monitor_network.sh en0 3600
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
EOF

    echo "‚úÖ Created systemd service: network_monitor.service"
    echo "To install:"
    echo "  sudo cp network_monitor.service /etc/systemd/system/"
    echo "  sudo systemctl enable network_monitor.service"
    echo "  sudo systemctl start network_monitor.service"
}

# Function to create a cron job for periodic monitoring
create_cron_job() {
    cat > network_monitor_cron.sh << 'EOF'
#!/bin/bash
# Network Security Monitor Cron Job
# Runs every hour

LOG_DIR="/var/log/network_security"
mkdir -p "$LOG_DIR"

DATE=$(date +%Y%m%d_%H%M%S)
LOG_FILE="$LOG_DIR/monitor_$DATE.log"

cd /path/to/network-security-analyzer

# Run 10-minute monitoring session
timeout 600 ./monitor_network.sh en0 600 > "$LOG_FILE" 2>&1

# Check for alerts and send notifications
if grep -q "SECURITY ALERT\|THREAT DETECTED" "$LOG_FILE"; then
    echo "Security alerts detected in $LOG_FILE" | mail -s "Network Security Alert" admin@company.com
fi

# Clean up old logs (keep last 7 days)
find "$LOG_DIR" -name "monitor_*.log" -mtime +7 -delete
EOF

    chmod +x network_monitor_cron.sh
    echo "‚úÖ Created cron job script: network_monitor_cron.sh"
    echo "To schedule (runs every hour):"
    echo "  crontab -e"
    echo "  Add: 0 * * * * /path/to/network-security-analyzer/network_monitor_cron.sh"
}

# Function to create a simple dashboard
create_dashboard() {
    cat > network_dashboard.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Network Security Dashboard</title>
    <style>
        body { font-family: Arial, sans-serif; margin: 20px; }
        .status { padding: 10px; margin: 10px 0; border-radius: 5px; }
        .running { background-color: #d4edda; border: 1px solid #c3e6cb; }
        .alert { background-color: #f8d7da; border: 1px solid #f5c6cb; }
        .info { background-color: #d1ecf1; border: 1px solid #bee5eb; }
        .log { background-color: #f8f9fa; border: 1px solid #dee2e6; padding: 10px; font-family: monospace; }
    </style>
    <script>
        function refreshStatus() {
            fetch('/status')
                .then(response => response.json())
                .then(data => {
                    document.getElementById('status').innerHTML = data.status;
                    document.getElementById('packets').innerHTML = data.packets;
                    document.getElementById('alerts').innerHTML = data.alerts;
                });
        }
        
        // Refresh every 30 seconds
        setInterval(refreshStatus, 30000);
    </script>
</head>
<body>
    <h1>üöÄ Network Security Dashboard</h1>
    
    <div class="status running">
        <h3>Status: <span id="status">Running</span></h3>
        <p>Packets Captured: <span id="packets">0</span></p>
        <p>Alerts: <span id="alerts">0</span></p>
    </div>
    
    <div class="status info">
        <h3>Quick Actions</h3>
        <button onclick="refreshStatus()">Refresh Status</button>
        <button onclick="window.open('/report', '_blank')">Generate Report</button>
    </div>
    
    <div class="status info">
        <h3>Recent Activity</h3>
        <div class="log" id="recent-log">
            Loading...
        </div>
    </div>
</body>
</html>
EOF

    echo "‚úÖ Created dashboard: network_dashboard.html"
    echo "Open in browser to view network security status"
}

# Main menu
show_menu() {
    echo ""
    echo "üéØ Available Actions:"
    echo "1. Build C++ Network Analyzer"
    echo "2. List Available Interfaces"
    echo "3. Basic Network Monitoring (30s)"
    echo "4. Extended Monitoring (5min)"
    echo "5. Create Monitoring Script"
    echo "6. Create System Service"
    echo "7. Create Cron Job"
    echo "8. Create Dashboard"
    echo "9. Run All Examples"
    echo "0. Exit"
    echo ""
    read -p "Choose an option (0-9): " choice
    
    case $choice in
        1)
            build_analyzer
            ;;
        2)
            list_interfaces
            ;;
        3)
            basic_monitoring "en0" 30
            ;;
        4)
            basic_monitoring "en0" 300
            ;;
        5)
            create_monitoring_script
            ;;
        6)
            create_monitoring_service
            ;;
        7)
            create_cron_job
            ;;
        8)
            create_dashboard
            ;;
        9)
            echo "üöÄ Running all examples..."
            build_analyzer
            list_interfaces
            basic_monitoring "en0" 30
            create_monitoring_script
            create_monitoring_service
            create_cron_job
            create_dashboard
            echo "‚úÖ All examples completed!"
            ;;
        0)
            echo "üëã Goodbye!"
            exit 0
            ;;
        *)
            echo "‚ùå Invalid option"
            ;;
    esac
}

# Check if running interactively
if [ "$1" = "--non-interactive" ]; then
    # Non-interactive mode for automation
    build_analyzer
    basic_monitoring "en0" 60
else
    # Interactive mode
    echo "Welcome to the C++ Network Security Analyzer!"
    echo "This tool provides basic packet capture and interface detection."
    echo ""
    
    while true; do
        show_menu
        echo ""
        read -p "Press Enter to continue..."
    done
fi
